import React from 'react'
import { map, range } from 'ramda'
import { Box } from '@mui/system'
import StarRateIcon from '@mui/icons-material/StarRate'
import StarBorderIcon from '@mui/icons-material/StarBorder'

import {
    includes,
    isEqual,
    some,
    startsWith,
    flatten,
    flow,
    keys,
    isPlainObject,
    isArray,
    forEach,
} from 'lodash'

import _ from 'lodash'

import { AgGridColumn, AgGridReact } from 'ag-grid-react'
import ReactJson from 'react-json-view'

import 'ag-grid-community/dist/styles/ag-grid.css'
import 'src/ag-theme-alpine.css'

import tdata from './t.json'

enum 当前价位级别 {
    低,
    中低,
    中,
    中高,
    高,
}

enum 方向 {
    多,
    空,
}

const CARE_MAX = 5
const 最大持仓金额 = 20000

// TODO
// 最大持仓数
// 当前持仓金额
// 当前持仓止损设置
// 当前持仓止盈设置
// 当前风控等级
// 排序
// 一手价格
// 盈亏合计
// 持仓时间 记录
// 预期等级
// 分配
// 策略
// 临期预警
// 主力合约

const Mode = () => {
    const policy = []
    const data = [
        {
            name: 'PTA',
            code: 'TA2021',
            count: 5,
            buy_price: 2100,
            current_price: 2200,
            当前价位: 当前价位级别.中低,
            dir: 方向.多,
            care: 5,
            max: 8000,
            min: 1600,

            rate: 0.2,
            unit: 5,
        },
        {
            name: '苹果',
            code: 'AP2021',
            count: 1,
            buy_price: 9000,
            current_price: 8000,
            当前价位: 当前价位级别.中低,
            dir: 方向.多,
            care: 3,
            max: 20000,
            min: 5000,

            rate: 0.2,
            unit: 10,
        },
    ]

    const calData = map((item: typeof data[0]) => {
        const 一手保证金 = item.buy_price * item.unit * item.rate
        return {
            ...item,
            一手保证金,
            最大持仓数: Math.floor(最大持仓金额 / 一手保证金),
        }
    })(data)

    const rowData = [
        { make: 'Toyota', model: 'Celica', price: 35000 },
        { make: 'Ford', model: 'Mondeo', price: 32000 },
        { make: 'Porsche', model: 'Boxter', price: 72000 },
    ]

    const data3 = tdata
    const data1 = {
        1: 2,
        a: 3,
        r: [
            1,
            {
                a: 1,
            },
            {
                b: 2,
            },
        ],
        // a: {
        //     b: {
        //         c: {
        //             t: {},
        //             t2: 2,
        //             t3: null,
        //             t4: undefined,
        //             t5: [{ s: 1 }, { s2: 2 }],
        //             t6: {
        //                 t7: {
        //                     t8: 123,
        //                 },
        //             },
        //         },
        //     },
        //     d: {
        //         e: 1,
        //     },
        // },
        d: {
            e: 1,
        },
        f: null,
        g: undefined,
        t: 0,
    }

    // const getKeys = (
    //     data: any,
    //     keyData = { namespace: ['root'], name: 'root', fullName: 'root' }
    // ): any => {
    //     if (isPlainObject(data)) {
    //         console.log('data', data)

    //         return flow([
    //             keys,
    //             map((name: string) => {
    //                 const val = data[name]
    //                 const newKeyData = {
    //                     namespace: [...keyData.namespace, name],
    //                     name,
    //                     fullName: `${keyData.fullName}/${name}`,
    //                 }

    //                 if (isPlainObject(val) && Object.keys(val).length) {
    //                     return getKeys(val, newKeyData)
    //                 }

    //                 return newKeyData
    //             }),
    //             rv => [keyData, ...flatten(rv)],
    //         ])(data)
    //     }

    //     console.log('data1', data)
    //     return []
    // }
    console.log(data1)

    const TYPE_NORMAL = 'Normal'
    const TYPE_PLAIN_OBJECT = 'PlainObject'
    const TYPE_ARRAY = 'Array'
    const TYPE_ARRAY_ITEM = 'ArrayItem'

    const getItemType = (parentType: string, item: any) => {
        if (parentType === TYPE_ARRAY) {
            return TYPE_ARRAY_ITEM
        }

        if (item instanceof Object) {
            if (_.isArray(item)) {
                return TYPE_ARRAY
            }
            return TYPE_PLAIN_OBJECT
        }

        return TYPE_NORMAL
    }

    const getFieldList = (
        isRoot: boolean,
        label: string,
        data: any,
        path: string[],
        pathSrc: string,
        parentType = TYPE_PLAIN_OBJECT
    ): any => {
        if (data instanceof Object) {
            let rv = _.map(data, (item, key) => {
                const itemType = getItemType(parentType, item)
                const itemPath = [...path, key]
                const itemPathStr = `${isRoot ? '' : `${pathSrc}/`}${
                    itemType === TYPE_ARRAY_ITEM ? `[${key}]` : key
                }`

                if (item instanceof Object) {
                    const fieldList = getFieldList(
                        false,
                        key,
                        item,
                        itemPath,
                        itemPathStr,
                        itemType
                    )
                    return _.filter(
                        fieldList,
                        field => field.type !== TYPE_ARRAY_ITEM
                    )
                }

                return {
                    type: itemType,
                    label: key,
                    value: key,
                    data: item,
                    path: itemPath,
                    pathStr: itemPathStr,
                }
            })

            if (isRoot) {
                return flatten(rv)
            }

            let transData = data

            if (parentType === TYPE_ARRAY) {
                transData = `[${TYPE_ARRAY}]`
            } else if (parentType === TYPE_PLAIN_OBJECT) {
                transData = `[${TYPE_PLAIN_OBJECT}]`
            }

            return [
                {
                    type: parentType,
                    label,
                    value: label,
                    data: transData,
                    path,
                    pathStr: path.join('/'),
                },
                ...flatten(rv),
            ]
        }

        return []
    }

    // const keys12 = getKeys(data1)
    const keys12 = getFieldList(true, '', data1, ['root'], 'root')
    const fieldOption = _.uniqWith(
        keys12,
        (a: any, b: any) => a.value === b.value
    )
    console.log(keys12, fieldOption)

    // select: b list: root/b
    // const select = 'root/a/b/c/t6'
    const select = ['root/a/d', 'root/d']

    // const openNode = keys12.filter((item: any) => {
    //     return some(
    //         select.map(
    //             selectItem =>
    //                 item.fullName.length <= selectItem.length &&
    //                 includes(item.fullName, selectItem)
    //         )
    //     )
    // })

    // console.log(openNode)

    return (
        <div>
            {keys12[0]?.path}-{keys12[0]?.pathStr}
        </div>
    )

    return (
        <ReactJson
            shouldCollapse={(field: any) => {
                // if (field.name !== 'root') {
                //     const namespaceStr = field.namespace.join('/')

                //     for (let i = 0; i < openNode.length; i++) {
                //         if (
                //             namespaceStr.length <=
                //                 openNode[i].fullName.length &&
                //             startsWith(openNode[i].fullName, namespaceStr)
                //         ) {
                //             return false
                //         }
                //     }

                //     return true
                // }

                // return field.name !== 'root' && field.name !== 'r'
                return false
            }}
            src={data1}
        />
    )

    // return (
    //     <AgGridReact rowData={rowData}>
    //         <AgGridColumn field="make"></AgGridColumn>
    //         <AgGridColumn field="model"></AgGridColumn>
    //         <AgGridColumn field="price"></AgGridColumn>
    //     </AgGridReact>
    // )

    // return (
    //     <Box
    //         sx={{
    //             display: 'flex',
    //             flexDirection: 'column',
    //             justifyContent: 'center',
    //             alignItems: 'center',
    //             paddingTop: 2,
    //         }}
    //     >
    //         {map((item: typeof calData[0]) => (
    //             <Box
    //                 key={item.code}
    //                 sx={{
    //                     display: 'flex',
    //                     flex: 1,
    //                     marginTop: 2,
    //                     padding: 1,
    //                     paddingBottom: 2,
    //                     justifyContent: 'space-around',
    //                     borderBottom: '0.3px solid #333',
    //                     color: 'white',
    //                 }}
    //             >
    //                 <Box sx={{ width: 150 }}>
    //                     {item.name} / {item.code}
    //                 </Box>
    //                 <Box sx={{ width: 150 }}>{item.buy_price}</Box>
    //                 <Box sx={{ width: 150 }}>{item.一手保证金}</Box>
    //                 <Box sx={{ width: 150 }}>
    //                     {item.count} / {item.最大持仓数} (
    //                     {((item.count / item.最大持仓数) * 100).toFixed(0)}%)
    //                 </Box>
    //                 <Box sx={{ width: 150 }}>
    //                     {item.一手保证金 * item.count}
    //                 </Box>
    //                 <Box
    //                     sx={{
    //                         width: 400,
    //                         display: 'flex',
    //                         justifyContent: 'flex-start',
    //                     }}
    //                 >
    //                     <Box sx={{ marginRight: 1 }}>{item.min}</Box>
    //                     <Box
    //                         sx={{
    //                             display: 'flex',
    //                             flexDirection: 'column',
    //                         }}
    //                     >
    //                         <Box
    //                             sx={{
    //                                 display: 'flex',
    //                                 justifyContent: 'flex-start',
    //                             }}
    //                         >
    //                             {map((i: number) => (
    //                                 <Box
    //                                     key={i}
    //                                     sx={{
    //                                         width: 10,
    //                                         height: 20,
    //                                         background: 'green',
    //                                         border: '1px solid #555',
    //                                         marginRight: 0.2,
    //                                     }}
    //                                 ></Box>
    //                             ))(
    //                                 range(
    //                                     0,
    //                                     10 -
    //                                         (10 *
    //                                             (item.max -
    //                                                 item.current_price)) /
    //                                             item.max
    //                                 )
    //                             )}
    //                             {map((i: number) => (
    //                                 <Box
    //                                     key={i}
    //                                     sx={{
    //                                         width: 10,
    //                                         height: 20,
    //                                         border: '1px solid #555',
    //                                         marginRight: 0.2,
    //                                     }}
    //                                 ></Box>
    //                             ))(
    //                                 range(
    //                                     0,
    //                                     (10 * (item.max - item.current_price)) /
    //                                         item.max
    //                                 )
    //                             )}
    //                         </Box>
    //                         <Box>
    //                             {item.current_price} -
    //                             {(
    //                                 (item.current_price / item.max) *
    //                                 100
    //                             ).toFixed(0)}
    //                             %
    //                         </Box>
    //                     </Box>
    //                     <Box sx={{ marginLeft: 1 }}>{item.max}</Box>
    //                 </Box>
    //                 <Box
    //                     sx={{
    //                         width: 150,
    //                         display: 'flex',
    //                         justifyContent: 'flex-start',
    //                     }}
    //                 >
    //                     {map((i: number) => (
    //                         <StarRateIcon key={i} sx={{ color: 'green' }} />
    //                     ))(range(0, item.care))}
    //                     {map((i: number) => <StarBorderIcon key={i} />)(
    //                         range(0, CARE_MAX - item.care)
    //                     )}
    //                 </Box>
    //                 <Box sx={{ width: 150 }}>
    //                     {item.dir === 方向.多 ? '多' : '空'}
    //                 </Box>
    //                 <Box sx={{ width: 150 }}>
    //                     {item.dir === 方向.多
    //                         ? (item.current_price - item.buy_price) *
    //                           item.unit *
    //                           item.count
    //                         : (item.buy_price - item.current_price) *
    //                           item.unit *
    //                           item.count}
    //                 </Box>
    //             </Box>
    //         ))(calData)}
    //     </Box>
    // )
}

export default Mode
