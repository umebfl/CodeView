import { clone, compose, filter, find, includes, map, props } from 'ramda'
import 上级数据流程 from 'src/数据流/1级数据处理/流程/1级数据流程'
import { type_基础品种信息 } from 'src/数据流/1级数据处理/管道/依据数据源文本拆解品种信息'
import { type_印记_二级, 不合格原因 } from 'src/数据流/type'
import 无法交易品种列表, {
    type_无法交易品种,
} from 'src/数据流/2级数据处理/数据/无法交易品种列表'
import 垃圾品种列表, {
    type_垃圾品种,
} from 'src/数据流/2级数据处理/数据/垃圾品种列表'
import 新品种列表, { type_新品种 } from 'src/数据流/2级数据处理/数据/新品种列表'
import 同类品种列表, {
    type_同类品种,
} from 'src/数据流/2级数据处理/数据/同类品种列表'

export const 最低保证金比例 = 20 //20

export interface type_2级数据流程输出 {
    品种列表: type_基础品种信息_二级[]
}

export interface type_2级数据流程结果 extends type_2级数据流程输出 {
    印记: type_印记_二级
}

export interface type_基础品种信息_二级 extends type_基础品种信息 {
    合格状态: boolean
    不合格原因: 不合格原因[]
}

const 一阶数据处理_过滤保证金比例过高品种 = (
    品种信息: type_基础品种信息[]
): type_基础品种信息_二级[] => {
    return map((品种: type_基础品种信息) => {
        const 合格 = 品种.rate <= 最低保证金比例
        const fix合格 = 品种.Code === 'BU' || 品种.Code === 'FU' ? true : 合格

        return {
            ...品种,
            合格状态: fix合格,
            不合格原因: fix合格 ? [] : [不合格原因.保证金比例过高],
        }
    })(品种信息)
}

const 二阶数据处理_过滤无法交易品种 = (
    一阶数据处理结果: type_基础品种信息_二级[]
) => {
    return map((品种: type_基础品种信息_二级) => {
        const 存在于无法交易列表 = find((无法交易品种: type_无法交易品种) => {
            return 无法交易品种.Code === 品种.Code
        })(无法交易品种列表)

        const 合格 = !存在于无法交易列表

        return {
            ...品种,
            合格状态: 品种.合格状态 ? 合格 : 品种.合格状态,
            不合格原因: 合格
                ? 品种.不合格原因
                : [...品种.不合格原因, 不合格原因.无法交易],
        }
    })(一阶数据处理结果)
}

// 过滤 - 垃圾品种
const 三阶数据处理_过滤垃圾品种 = (
    二阶数据处理结果: type_基础品种信息_二级[]
) => {
    return map((品种: type_基础品种信息_二级) => {
        const 存在于垃圾列表 = find((垃圾品种: type_垃圾品种) => {
            return 垃圾品种.Code === 品种.Code
        })(垃圾品种列表)

        const 合格 = !存在于垃圾列表

        return {
            ...品种,
            合格状态: 品种.合格状态 ? 合格 : 品种.合格状态,
            不合格原因: 合格
                ? 品种.不合格原因
                : [...品种.不合格原因, 不合格原因.垃圾品种],
        }
    })(二阶数据处理结果)
}

// 过滤 - 新品种品种
const 四阶数据处理_新品种 = (三阶数据处理结果: type_基础品种信息_二级[]) => {
    return map((品种: type_基础品种信息_二级) => {
        const 存在于新品种列表 = find((新品种: type_新品种) => {
            return 新品种.Code === 品种.Code
        })(新品种列表)

        const 合格 = !存在于新品种列表

        return {
            ...品种,
            合格状态: 品种.合格状态 ? 合格 : 品种.合格状态,
            不合格原因: 合格
                ? 品种.不合格原因
                : [...品种.不合格原因, 不合格原因.新品种],
        }
    })(三阶数据处理结果)
}

const 五阶数据处理_同类品种列表 = (
    四阶数据处理结果: type_基础品种信息_二级[]
) => {
    return map((品种: type_基础品种信息_二级) => {
        const 存在于同类品种列表 = find((新品种: type_新品种) => {
            return 新品种.Code === 品种.Code
        })(同类品种列表)

        const 合格 = !存在于同类品种列表

        return {
            ...品种,
            合格状态: 品种.合格状态 ? 合格 : 品种.合格状态,
            不合格原因: 合格
                ? 品种.不合格原因
                : [...品种.不合格原因, 不合格原因.同类品种],
        }
    })(四阶数据处理结果)
}

// 过滤 - 保证金金额
// 过滤 - 沉淀资金额过低
// 依据品种信息, 获取实时价格

const 流程 = (): type_2级数据流程结果 => {
    const 上级数据 = 上级数据流程()

    const 一阶数据处理结果 = 一阶数据处理_过滤保证金比例过高品种(
        上级数据.品种信息
    )

    const 二阶数据处理结果 = 二阶数据处理_过滤无法交易品种(一阶数据处理结果)
    const 三阶数据处理结果 = 三阶数据处理_过滤垃圾品种(二阶数据处理结果)
    const 四阶数据处理结果 = 四阶数据处理_新品种(三阶数据处理结果)
    const 五阶数据处理结果 = 五阶数据处理_同类品种列表(四阶数据处理结果)

    const 二级数据流程输出 = {
        品种列表: 五阶数据处理结果,
    }

    return {
        ...二级数据流程输出,
        印记: {
            ...上级数据.印记,
            二级数据流程输出: clone(二级数据流程输出),
        },
    }
}

export default 流程
