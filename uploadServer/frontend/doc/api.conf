syntax = "proto2";

package autox.upload_srv_monitor.disk_management;

enum DiskOwner {
    UNKNOWN = 0;
    PINGSHAN = 1;
    NANSHAN = 2;
}

enum DiskStatus {
    NORMAL = 0;
    LOST = 1;
    DAMAGED = 2;
}

enum DiskOnServer {
    NOT_ON_SERVER = 0;
    ON_SERVER = 1;
}

enum DiskXrayUploadStatus {
    NOT_UPLOAD = 0;
    UPLOADING = 1;
    SUCCEED = 2;
    FAILED = 3;
}

message DiskInfo {
    optional string disk_sn = 1;
2;
    optional DiskStatus status = 3;
    optional bool on_server = 4;"owner": 1,
    optional string comment = 5;
}

message UploadRecord {
    optional string disk_sn = 1;
    optional string disk_plug_time = 2;
    optional string upload_start_time = 3;
    optional string upload_end_time = 4;
    optional string vehicle_id = 5;
    repeated string xray_uris = 6;
    optional DiskXrayUploadStatus upload_status = 7;
}


// get_disks_info s
// The request and response for getting all disk info.
message GetDisksInfoRequest {
    optional string disk_sn = 1;  // Get all disks info if disk_sn not assigned.
}

message GetDisksInfoResponse {
    repeated DiskInfo disks_info = 1;
    optional int32 code = 2;
    optional string msg = 3;
}
// get_disks_info e


// get_upload_records s
// The request and response for getting all historical xray upload records of the disk.
message GetUploadRecordsRequest {
    optional string disk_sn = 1;
}

message GetUploadRecordsResponse {
    optional string disk_sn = 1;
    repeated UploadRecord upload_records = 2;
    optional int32 code = 3;
    optional string msg = 4;
}
// get_upload_records e


// /disk_management/upsert_disk_info
// The request and response for updating disks info.
// It will insert disk info to DB if not exist or update the existing disk info.
message UpsertDiskInfoRequest {
    optional string disk_sn = 1;  // required to insert or update.
    optional DiskOwner owner = 2;
    optional DiskStatus status = 3;
    optional bool on_server = 4;
    optional string comment = 5;
}

message UpsertDiskInfoResponse {
    optional int32 code = 1;
    optional string msg = 2;
}
// /disk_management/upsert_disk_info


// /disk_management/add_upload_record s
// The request and response for adding one xray upload record of a disk.
message AddUploadRecordRequest {
    optional string disk_sn = 1;
    optional string disk_plug_time = 2;
    optional string upload_start_time = 3;
    optional string upload_end_time = 4;
    optional string vehicle_id = 5;
    repeated string xray_uris = 6;
    optional DiskXrayUploadStatus upload_status = 7;
}

message AddUploadRecordResponse {
    optional int32 code = 1;
    optional string msg = 2;
}
// /disk_management/add_upload_record e


// /disk_management/update_disk_upload_state s
// The request and response for updating disk upload status.
message UpdateDiskUploadStateRequest {
    optional string disk_sn = 1;
    optional string disk_plug_time = 2;
    optional string upload_start_time = 3;
    optional string upload_end_time = 4;
    optional DiskXrayUploadStatus upload_status = 5;
}

message UpdateDiskUploadStateResponse {
    optional int32 code = 1;
    optional string msg = 2;
}
// /disk_management/update_disk_upload_state e